function [ best_radius, best_density ] = MinimizeMetaball( probGT, probIm, center, par  )
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

r = 2;

k1 = par.k1;
k2 = par.k2;
temp = (double(probIm(center(1), center(2))) - k1 * double(probGT(center(1), center(2))));
temp = temp / (255 * k2);
d = temp;
d_step = 0.05

base_err = OptimizeMetaball( probGT, probIm, r, d, center, par );

while(true)
    err1 = OptimizeMetaball( probGT, probIm, r - 1, d, center, par );
    err2 = OptimizeMetaball( probGT, probIm, r + 1, d, center, par );
    
    err3 = OptimizeMetaball( probGT, probIm, r, d - d_step, center, par );
    err4 = OptimizeMetaball( probGT, probIm, r, d + d_step, center, par );
    
    err5 = OptimizeMetaball( probGT, probIm, r - 1, d - d_step, center, par );
    err6 = OptimizeMetaball( probGT, probIm, r - 1, d + d_step, center, par );
    
    err7 = OptimizeMetaball( probGT, probIm, r + 1, d - d_step, center, par );
    err8 = OptimizeMetaball( probGT, probIm, r + 1, d + d_step, center, par );

    err = [err1, err2, err3, err4, err5, err6, err7, err8];

    [val, ind] = min(err);

    if val >= base_err
        best_radius = r;
        best_density = d;
        break;
    else
        switch(ind)
            case 1
                r = r - 1;
            case 2
                r = r + 1;
            case 3
                d = d - d_step;
                if d < 1e-8
                   best_density = 0;
                   best_radius = Inf;
                   break;
                end
            case 4
                d = d + 0.05;
                if d > temp
                    best_radius = r;
                    best_density = 1;
                end
            case 5
                r = r - 1;
            case 6
                r = r - 1;
            case 7
                r = r + 1;
            case 8
                r = r + 1;
        end
        base_err = val;
    end
end

end